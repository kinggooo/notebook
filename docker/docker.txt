#centos7安装docker
1.yum update
2.yum remove docker  docker-common docker-selinux docker-engine
3.yum install -y yum-utils device-mapper-persistent-data lvm2
4.yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
5.yum list docker-ce --showduplicates | sort -r
6.yum install docker-ce.x86_64
7.systemctl start docker
8.systemctl enable docker
9.yum list installed | grep docker

#非root用户使用docker
sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo systemctl restart docker

docker pull ubuntu
docker pull ubuntu:14.04
docker pull dl.dockerpool.com:5000/ubuntu:14.04


docker tag dl.dockerpool.com:5000/ubuntu:14.04 myubuntu:latest

docker inspect image_id

docker inspect -f {{".Architecture"}} image_id

docker search mysql

docker rmi dl.dockerpool.com:5000/ubuntu:14.04
docker rmi image_id
docker rmi -f ubuntu


docker commit -m "add file" -a "wangnz" image_id test1

cat ubuntu.tar.gz | docker import - ubuntu:14.04

docker save -o centos7.tar centos7
docker load < centos7.tar

docker tag test1:latest user/test1:latest
docker push user/test1:latest


docker create -it test1
docker run = docker create + docker start

docker run centos /bin/echo "hello"
docker run -it centos /bin/bash
docker run -d centos7 /bin/sh -c "while true;do echo helloworld;sleep 5;done"

docker logs cid
docker stop cid
docker kill cid

docker start cid

docker run -itd centos7
docker attach cid
docker exec -it cid /bin/bash

docker rm cid

docker export cid > test.tar
cat test.tar | docker import - test/centos7:latest

5.仓库
创建并使用私有仓库
docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry
docker tag centos7 192.168.182.129:5000/test
docker push 192.168.182.129:5000/test

6.数据管理
使用数据卷和数据卷容器
通过-v参数可以挂载本地目录到容器中的目录
-v /home/webapp:/opt/webapp
也可以挂在文件做为数据卷，但不建议使用。
-v /home/log.txt:/opt/log.txt

数据卷容器可以用来在不同的容器间共享数据
创建一个容器并在其中创建一个数据卷挂载到/dbdata
docker run -it -v /dbdata --name dbdata centos7
然后通过--volumes-from来挂载/dbdata
docker run -it --volumes-from dbdata --name db1 centos7
docker run -it --volumes-from dbdata --name db2 centos7
容器可以挂载多个，也可以从其他挂载了容器卷的容器进行挂载
docker run -it --volumes-from db2 --name db3 centos7

删除容器并不会删除数据卷，需要使用-v来删除。
docker rm -v

使用数据容器卷备份数据
利用本地目录映射容器中目录并使用tar命令备份dbdata下的数据
docker run --volumes-from dbdata -v $(pwd):/backup --name worker centos7 tar cvf /backup/backup.tar /dbdata

恢复数据
先创建一个新的数据卷
docker run -v /dbdata --name dbdata2 centos7 /bin/bash
创建容器并挂载新数据卷，同时映射本地目录到/backup，并使用tar进行解压数据。
docker run --volumes-from dbdata2 -v $(pwd):/backup --name restore centos7 tar xvf /backup/backup.tar

7.网络配置
-P 随机映射49000-49900的端口至容器内部开放端口
docker run -d -P centos7 python app.py
-p 指定要映射的端口 hostPort:containerPort
映射所有地址
docker run -d -p 5000:5000 centos7 python app.py

映射指定地址的指定端口
docker run -d -p 127.0.0.1:5000:5000 centos7 python app.py

查看端口配置
docker port xxx 5000

容器互联
docker run -d -P --name web centos7 python app.py
docker ps -l
docker inspect -f "{{.Name}}" cid

--rm 会在容器终止后立刻删除 不能和-d一起使用

--link 容器名:别名 使容器间进行互联
创建新容器
docker run -d --name db centos7
连接新容器，通过web可以访问db，并不需要映射端口到宿主机上。
docker run -d -P --name web --link db:db centos7 python app.py

用evn查看容器环境变量
docker run --rm -P --name web --link db:db centos7 env
在容器的hosts文件中也会记录信息 可以使用ping db来测试。

8.dockerfile创建镜像
#第一行必须制定基础镜像
FROM centos7

#维护者信息
MAINTAINER wangnz wangnz@email.com

#指定环境变量可以被后续使用并保持
ENV ENAME abc

#复制当前相对路径中的文件或目录到容器中
ADD src dest

#复制当前相对路径中的文件或目录到容器中
COPY src dest

#镜像操作命令
RUN command

#指定暴露端口
EXPOSE 22 80 443

#创建挂载点
VOLUME ["/data"]

#为后续命令指定工作目录，类似cd命令。
WORKDIR pwd

#容器启动时执行的命令，只能有一个cmd，写多个会执行最后一个。启动时指定cmd会覆盖原有cmd。
CMD /usr/sbin/nginx

#容器启动后执行的命令，并且不会被启动时参数覆盖。
ENTRYPOINT [cmd,param,param]

创建镜像
docker build -t testimg /tmp/dockerdir/







################################################################################################
Docker基础命令

# 在ubuntu中安装docker
$ sudo apt-get install docker.io

# 查看docker的版本信息
$ docker version

# 查看安装docker的信息
$ docker info

# 查看本机Docker中存在哪些镜像
$ docker images

# 检索image
$ docker search ubuntu:14.04

# 在docker中获取ubuntu镜像
$ docker pull ubuntu:14.04

# 显示一个镜像的历史
$ docker history birdben/ubuntu:v1

# 列出一个容器里面被改变的文件或者目
$ docker diff birdben/ubuntu:v1

# 从一个容器中取日志
$ docker logs birdben/ubuntu:v1

# 显示一个运行的容器里面的进程信息
$ docker top birdben/ubuntu:v1

# 从容器里面拷贝文件/目录到本地一个路径
$ docker cp ID:/container_path to_path

# 列出当前所有正在运行的容器
$ docker ps

# 列出所有的容器
$ docker ps -a

# 列出最近一次启动的容器
$ docker ps -l

# 查看容器的相关信息
$ docker inspect $CONTAINER_ID

# 显示容器IP地址和端口号，如果输出是空的说明没有配置IP地址（不同的Docker容器可以通过此IP地址互相访问）
$ docker inspect --format='{{.NetworkSettings.IPAddress}}' $CONTAINER_ID

# 保存对容器的修改
$ docker commit -m "Added ssh from ubuntu14.04" -a "birdben" 6s56d43f627f3 birdben/ubuntu:v1

# 参数：
# -m参数用来来指定提交的说明信息；
# -a可以指定用户信息的；
# 6s56d43f627f3代表的时容器的id；
# birdben/ubuntu:v1指定目标镜像的用户名、仓库名和 tag 信息。

# 构建一个容器
$ docker build -t="birdben/ubuntu:v1" .

# 参数：
# -t为构建的镜像制定一个标签，便于记忆/索引等
# . 指定Dockerfile文件在当前目录下，也可以替换为一个具体的 Dockerfile 的路径。

# 在docker中运行ubuntu镜像
$ docker run <相关参数> <镜像 ID> <初始命令>

# 守护模式启动
$ docker run -it ubuntu:14.04

# 交互模式启动
$ docker run -it ubuntu:14.04 /bin/bash

# 指定端口号启动
$ docker run -p 80:80 birdben/ubuntu:v1

# 指定配置启动
$ sudo docker run -d -p 10.211.55.4:9999:22 birdben/ubuntu:v1 '/usr/sbin/sshd' -D

# 参数：
# -d：表示以“守护模式”执行，日志不会出现在输出终端上。
# -i：表示以“交互模式”运行容器，-i 则让容器的标准输入保持打开
# -t：表示容器启动后会进入其命令行，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上
# -v：表示需要将本地哪个目录挂载到容器中，格式：-v <宿主机目录>:<容器目录>，-v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。
# -p：表示宿主机与容器的端口映射，此时将容器内部的 22 端口映射为宿主机的 9999 端口，这样就向外界暴露了 9999 端口，可通过 Docker 网桥来访问容器内部的 22 端口了。
# 注意：这里使用的是宿主机的 IP 地址：10.211.55.4，与对外暴露的端口号 9999，它映射容器内部的端口号 22。ssh外部需要访问：ssh root@10.211.55.4 -p 9999
# 不一定要使用“镜像 ID”，也可以使用“仓库名:标签名”

# start 启动容器
$ docker start 117843ade696117843ade696
# stop 停止正在运行的容器
$ docker stop 117843ade696117843ade696
# restart 重启容器
$ docker restart 117843ade696117843ade696
# rm 删除容器
$ docker rm 117843ade696117843ade696
# rmi 删除镜像
$ docker rmi ed9c93747fe1Deleted

# 登录Docker Hub中心
$ docker login

# 发布上传image（push）
$ docker push birdben/ubuntu:v1

# 安装docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
# 启动
docker-compose -f docker-compose.yml up -d


# 可视化界面
docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name portainer  docker.io/portainer/portainer
docker run -d -v "/var/run/docker.sock:/var/run/docker.sock" -p 9000:9000 portainer/portainer