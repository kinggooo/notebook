mongod --config /Users/wangnz/tool/mongod.conf
mongo --config /Users/wangnz/tool/mongod.conf
use admin
db.shutdownServer()
./mongod -shutdown -dbpath=/Users/wangnz/tool/data/mongodb


 用户角色
数据库用户角色
read:允许用户读取指定的数据库
readWrite:允许用户读写指定数据库
数据库管理角色
dbAdmin:允许用户在指定数据库执行管理函数，创建索引，删除索引，查看统计.
userAdmin:允许用户向system.users集合写入，可以在指定数据库创建删除管理账号
dbOwner:指定数据库最大的权限，是readWrite+dbAdmin+userAdmin的和。
群集管理角色（只在admin数据库可用）
clusterAdmin:用户所有分片和复制集相关函数的管理权限
clusterManager:管理和监控群集。
clusterMonitor:只能访问监控工具。
hostManager:监视和管理。
备份和还原角色
backup
restore
所有角色(只在admin数据库可用)
readAnyDatabase：赋予用户所有数据库的读权限
readWriteAnyDatabase:赋予用户所有数据库的读写权限
userAdminAnyDatabase：赋予所有数据库的useradmin权限
dbAdminAnyDatabase：赋予所有数据库的dbadmin权限。
超级角色(只在admin可用)
root：超级账号，超级权限


wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.9.tgz
wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.4.3.tgz
#docker build -f Dockerfile1 -t "kinggooo/mongo" .
#docker run -d -p 27017:27017 --name mgdb -v /Users/wangnz/Documents/mydev/docker/mongo:/opt/data kinggooo/mongo
#docker run -d -p 27017:27017 --name mgdb -v /home/wangnz/data/mongo:/opt/data kinggooo/mongo

docker run -d -p 9999:22 -p 30000:30000 -v /opt/docker/mongodb:/mongodb --privileged=true mongo

docker run -d -p 27017:27017 --name mgdb -v /home/wangnz/data/mongo:/etc/mongo mongo --config /etc/mongo/mongod.conf
docker run -d -p 27017:27017 --name mgdb mongo

chcon -Rt svirt_sandbox_file_t /home/wangnz/data/mongo


docker run -ti --rm --entrypoint="/bin/bash" mongo -c "whoami && id"
docker run -ti --rm --entrypoint="/bin/bash" mongo -c "ls -la /etc/mongo"
docker run -ti --rm -v /home/wangnz/data/mongo:/etc/mongo --entrypoint="/bin/bash" mongo -c "ls -la /etc/mongo"


--quiet # 安静输出
--port arg # 指定服务端口号，默认端口27017
--bind_ip arg # 绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP
--logpath arg # 指定MongoDB日志文件，注意是指定文件不是目录
--logappend # 使用追加的方式写日志
--pidfilepath arg # PID File 的完整路径，如果没有设置，则没有PID文件
--keyFile arg # 集群的私钥的完整路径，只对于Replica Set 架构有效
--unixSocketPrefix arg # UNIX域套接字替代目录,(默认为 /tmp)
--fork # 以守护进程的方式运行MongoDB，创建服务器进程
--auth # 启用验证
--cpu # 定期显示CPU的CPU利用率和iowait
--dbpath arg # 指定数据库路径
--diaglog arg # diaglog选项 0=off 1=W 2=R 3=both 7=W+some reads
--directoryperdb # 设置每个数据库将被保存在一个单独的目录
--journal # 启用日志选项，MongoDB的数据操作将会写入到journal文件夹的文件里
--journalOptions arg # 启用日志诊断选项
--ipv6 # 启用IPv6选项
--jsonp # 允许JSONP形式通过HTTP访问（有安全影响）
--maxConns arg # 最大同时连接数 默认2000
--noauth # 不启用验证
--nohttpinterface # 关闭http接口，默认关闭27018端口访问
--noprealloc # 禁用数据文件预分配(往往影响性能)
--noscripting # 禁用脚本引擎
--notablescan # 不允许表扫描
--nounixsocket # 禁用Unix套接字监听
--nssize arg (=16) # 设置信数据库.ns文件大小(MB)
--objcheck # 在收到客户数据,检查的有效性，
--profile arg # 档案参数 0=off 1=slow, 2=all
--quota # 限制每个数据库的文件数，设置默认为8
--quotaFiles arg # number of files allower per db, requires --quota
--rest # 开启简单的rest API
--repair # 修复所有数据库run repair on all dbs
--repairpath arg # 修复库生成的文件的目录,默认为目录名称dbpath
--slowms arg (=100) # value of slow for profile and console log
--smallfiles # 使用较小的默认文件
--syncdelay arg (=60) # 数据写入磁盘的时间秒数(0=never,不推荐)
--sysinfo # 打印一些诊断系统信息
--upgrade # 如果需要升级数据库

mongo admin --username admin  --host xx.xx.xx.xx --port 27017 --password

db.createUser(
{
user:  "dba",
pwd:  "dba",
roles:  [ { role: "userAdminAnyDatabase", db: "admin" } ]
}
)

db.dropUser(‘gao’)
db.changeUserPassword(“要修改密码的用户名”,”新密码”)
db.updateUser( "test1",
{
               roles:[
               {role:"read",db:"admin"}
              ]   ,
            pwd:"test1password"
}
)
db.table.find()
db.table.insert()
db.table.updateOne()
db.table.updateMany()
db.table.replaceOne()
db.table.deleteMany({})
db.table.deleteOne({})