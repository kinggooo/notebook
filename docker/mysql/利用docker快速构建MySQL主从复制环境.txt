在学习MySQL的过程中，常常会测试各种参数的作用。这时候，就需要快速构建出MySQL实例，甚至主从。



考虑如下场景：

譬如我想测试mysqldump在指定--single-transaction参数的情况下，对于myisam表的影响。

本来想在现成的测试环境中进行，但测试环境中，有大量的数据，执行mysqldump进行全备，产生的SQL文件，很难基于表进行搜索。

这个时候，就特别渴望能有一套干净的实例进行测试。



此刻，快速构建能力就显得尤为必要，很多童鞋可能会问，通过脚本不就能实现么？为什么要用docker？

个人感觉：脚本太重，会涉及很多额外的工作，譬如创建用户，相对较长的数据库初始化过程，MySQL启动过程，而我需要的是一种快速构建，快速销毁的能力。

而这，正是Docker的强项。



如下，是利用docker启动一个实例的时间，不到1s，如果使用脚本来做的话，绝不会这么快。

# time  docker run --name slave -v /etc/slave.cnf:/etc/mysql/my.cnf -v /var/lib/mysql/slave:/var/lib/mysql -p3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.34
6b7fe5da9e8c77529ee634e163add57db5cd15757e88261ce320a502ae01f853

real    0m0.986s
user    0m0.026s
sys    0m0.018s


于是基于docker写了个脚本，可在30s左右新建一套MySQL主从复制环境

复制代码
#!/bin/bash

MASTER_DIR=/var/lib/mysql/master
SLAVE_DIR=/var/lib/mysql/slave

## First we could rm the existed container
docker rm -f master
docker rm -f slave

## Rm the existed directory
rm -rf $MASTER_DIR
rm -rf $SLAVE_DIR

## Start instance
docker run --name master -v /etc/master.cnf:/etc/mysql/my.cnf -v $MASTER_DIR:/var/lib/mysql  --net=host -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.34
docker run --name slave -v /etc/slave.cnf:/etc/mysql/my.cnf -v $SLAVE_DIR:/var/lib/mysql --net=host -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.34
## Creating a User for Replication
docker stop master slave
docker start master slave

sleep 3

docker exec -it master mysql -S /var/lib/mysql/mysql.sock -e "CREATE USER 'repl'@'127.0.0.1' IDENTIFIED BY 'repl';GRANT REPLICATION SLAVE ON *.* TO 'repl'@'127.0.0.1';"

## Obtaining the Replication Master Binary Log Coordinates
master_status=`docker exec -it master mysql -S /var/lib/mysql/mysql.sock -e "show master status\G"`
master_log_file=`echo "$master_status" | awk  'NR==2{print substr($2,1,length($2)-1)}'`
master_log_pos=`echo "$master_status" | awk 'NR==3{print $2}'`
master_log_file="'""$master_log_file""'"

## Setting Up Replication Slaves
docker exec -it slave mysql -S /var/lib/mysql/mysql.sock -e "CHANGE MASTER TO MASTER_HOST='127.0.0.1',MASTER_PORT=3306,MASTER_USER='repl',MASTER_PASSWORD='repl',MASTER_LOG_FILE=$master_log_file,MASTER_LOG_POS=$master_log_pos;"docker exec -it slave mysql -S /var/lib/mysql/mysql.sock -e "start slave;"
docker exec -it slave mysql -S /var/lib/mysql/mysql.sock -e "show slave status\G"

## Creates shortcuts
grep "alias master" /etc/profile
if [ $? -eq 1 ];then
echo 'alias mysql="docker exec -it master mysql"' >> /etc/profile
echo 'alias master="docker exec -it master mysql -h 127.0.0.1 -P3306"' >> /etc/profile
echo 'alias slave="docker exec -it master mysql -h 127.0.0.1 -P3307"' >> /etc/profile
source /etc/profile
fi
复制代码


脚本本身没有太多需要说明的地方，主从容器起来后，遵循的还是常见的主从复制建立流程。

主要是说说创建容器所涉及的选项。

docker run --name master -v /etc/master.cnf:/etc/mysql/my.cnf -v $MASTER_DIR:/var/lib/mysql  --net=host -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.34
-v /etc/master.cnf:/etc/mysql/my.cnf：将本地的配置文件映射成容器的配置文件，这样，可通过修改本地配置文件，来达到修改容器配置文件的效果。

-v $MASTER_DIR:/var/lib/mysql ：将本地目录映射成容器的数据目录，这样，方便查看数据目录的内容，不然的话，就默认保存在/var/lib/docker/volumes目录下，实在不方便查看。

--net=host：共享宿主机的网络，大大降低容器之间的通信复杂度。



注意

在脚本刚开始的时候，会删除之前的容器，这包含两步操作

1. 通过docker命令删除容器

2. 通过操作系统命令删除之前容器的数据目录。

如果不删除的话，再次通过如下命令创建容器时，并不会清空之前的数据目录，而是直接加载，相当于新启了一个mysqld进程启动之前的实例。

docker run --name master -v /etc/master.cnf:/etc/mysql/my.cnf -v $MASTER_DIR:/var/lib/mysql  --net=host -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6.34
这也给我们提供了一个思路，如果只是想测试参数的作用，并不想新建实例的话，只需通过docker命令删除容器，修改配置文件，通过上述命令创建容器即可。

在启动实例后，执行了一个重启实例的操作，因为在测试的过程中，发现如果执行docker exec -it master bash之类的操作，会导致容器down掉（具体down的原因还未分析），但是重启实例后就没问题。

docker stop master slave
docker start master slave

sleep 3


设置快捷键

mysql：mysql客户端，可以通过该客户端连接其它主机上的MySQL服务器。

master：执行master即可登录本机的master实例，省掉了指定主机名和端口的操作。

salve：执行slave即可登录本机的slave实例。