docker pull ubuntu
docker pull ubuntu:14.04
docker pull dl.dockerpool.com:5000/ubuntu:14.04


docker tag dl.dockerpool.com:5000/ubuntu:14.04 myubuntu:latest

docker inspect image_id

docker inspect -f {{".Architecture"}} image_id

docker search mysql

docker rmi dl.dockerpool.com:5000/ubuntu:14.04
docker rmi image_id
docker rmi -f ubuntu


docker commit -m "add file" -a "wangnz" image_id test1

cat ubuntu.tar.gz | docker import - ubuntu:14.04

docker save -o centos7.tar centos7
docker load < centos7.tar

docker tag test1:latest user/test1:latest
docker push user/test1:latest


docker create -it test1
docker run = docker create + docker start

docker run centos /bin/echo "hello"
docker run -it centos /bin/bash
docker run -d centos7 /bin/sh -c "while true;do echo helloworld;sleep 5;done"

docker logs cid
docker stop cid
docker kill cid

docker start cid

docker run -itd centos7
docker attach cid
docker exec -it cid /bin/bash

docker rm cid

docker export cid > test.tar
cat test.tar | docker import - test/centos7:latest

5.仓库
创建并使用私有仓库
docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry
docker tag centos7 192.168.182.129:5000/test
docker push 192.168.182.129:5000/test

6.数据管理
使用数据卷和数据卷容器
通过-v参数可以挂载本地目录到容器中的目录
-v /home/webapp:/opt/webapp
也可以挂在文件做为数据卷，但不建议使用。
-v /home/log.txt:/opt/log.txt

数据卷容器可以用来在不同的容器间共享数据
创建一个容器并在其中创建一个数据卷挂载到/dbdata
docker run -it -v /dbdata --name dbdata centos7
然后通过--volumes-from来挂载/dbdata
docker run -it --volumes-from dbdata --name db1 centos7
docker run -it --volumes-from dbdata --name db2 centos7
容器可以挂载多个，也可以从其他挂载了容器卷的容器进行挂载
docker run -it --volumes-from db2 --name db3 centos7

删除容器并不会删除数据卷，需要使用-v来删除。
docker rm -v

使用数据容器卷备份数据
利用本地目录映射容器中目录并使用tar命令备份dbdata下的数据
docker run --volumes-from dbdata -v $(pwd):/backup --name worker centos7 tar cvf /backup/backup.tar /dbdata

恢复数据
先创建一个新的数据卷
docker run -v /dbdata --name dbdata2 centos7 /bin/bash
创建容器并挂载新数据卷，同时映射本地目录到/backup，并使用tar进行解压数据。
docker run --volumes-from dbdata2 -v $(pwd):/backup --name restore centos7 tar xvf /backup/backup.tar

7.网络配置
-P 随机映射49000-49900的端口至容器内部开放端口
docker run -d -P centos7 python app.py
-p 指定要映射的端口 hostPort:containerPort
映射所有地址
docker run -d -p 5000:5000 centos7 python app.py

映射指定地址的指定端口
docker run -d -p 127.0.0.1:5000:5000 centos7 python app.py

查看端口配置
docker port xxx 5000

容器互联
docker run -d -P --name web centos7 python app.py
docker ps -l
docker inspect -f "{{.Name}}" cid

--rm 会在容器终止后立刻删除 不能和-d一起使用

--link 容器名:别名 使容器间进行互联
创建新容器
docker run -d --name db centos7
连接新容器，通过web可以访问db，并不需要映射端口到宿主机上。
docker run -d -P --name web --link db:db centos7 python app.py

用evn查看容器环境变量
docker run --rm -P --name web --link db:db centos7 env
在容器的hosts文件中也会记录信息 可以使用ping db来测试。

8.dockerfile创建镜像
#第一行必须制定基础镜像
FROM centos7

#维护者信息
MAINTAINER wangnz wangnz@email.com

#指定环境变量可以被后续使用并保持
ENV ENAME abc

#复制当前相对路径中的文件或目录到容器中
ADD src dest

#复制当前相对路径中的文件或目录到容器中
COPY src dest

#镜像操作命令
RUN command

#指定暴露端口
EXPOSE 22 80 443

#创建挂载点
VOLUME ["/data"]

#为后续命令指定工作目录，类似cd命令。
WORKDIR pwd

#容器启动时执行的命令，只能有一个cmd，写多个会执行最后一个。启动时指定cmd会覆盖原有cmd。
CMD /usr/sbin/nginx

#容器启动后执行的命令，并且不会被启动时参数覆盖。
ENTRYPOINT [cmd,param,param]

创建镜像
docker build -t testimg /tmp/dockerdir/