/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install git

git config user.name "xxx"
git config user.email "yyy@xxx.com"

git config --global user.name "xxx"
git config --global user.email "yyy@xxx.com"
git config -l
git config --unset --global user.name
git config --global alias.lg 'log --graph --abbrev-commit --pretty=oneline'
git config --global alias.lg 'log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative'
git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
git config --global alias.co 'checkout'
git config --global alias.st 'status'
git config --global alias.psm 'push origin master'
git config --global alias.plm 'pull origin master'
git config --global core.editor "vim" # 设置Editor使用vim
git config --global color.ui true
git config --global core.quotepath false # 设置显示中文文件名



git add .
git commit -m xxx

git branch xxx 创建新分支
git checkout xxx 切换到某分支
git checkout -b xxx 创建并切换到新分支
git checkout v1.0 切换到某tag
git checkout id 切换到某次提交
git checkout filename 撤销未add的文件修改


git stash 将当前分支未提交的代码暂存
git stash list 列出已暂存的修改
git stash apply 重新应用暂存的修改
git stash drop stash_id 删除暂存
git stash pop 拿回暂存修改并删除暂存内容
git stash clear 清空所有暂存内容

git branch -d xxx 删除分支
git branch -D xxx 强制删除分支

git clone gittest1 gittest2
git clone https://github.com/kinggooo/git2.git git2 克隆远程仓库到本地取名为git2
git push origin master(本地):master(远程) 把本地master分支推送到远程仓库origin的master分支上，默认往同名分支推送。
git push origin master

git push origin :master 推送本地的空分支去远程等于删除远程分支
# 等同于
git push origin --delete master

git remote add origin https://github.com/kinggooo/git2.git 添加一个远程仓库的别名并进行关联
git remote remove origin 删除一个远程仓库的


git log
git show id
git show-branch --more=10
git show --pretty=fuller

git diff id1 id2 比较提交
git diff branch1 branch2 比较分支
git diff --staged 比较暂存区

git rm a.txt


mv a.txt b.txt
git rm a.txt
git add b.txt

git mv a.txt b.txt



git cat-file -p 3b18

git rev-parse 3b18

git ls-files -s

git write-tree
git commit-tree

git diff
git diff --cached

git diff 13b60056 65275cd8 --name-only | xargs tar -cvf ../diff.tar
git diff 13b60056 65275cd8 --name-only | xargs -t -i{} cp --parents {} ../update


git reset --hard HEAD^ 回退到上个版本
git reset --hard id 回退到某个版本

git reflog git的操作历史记录
